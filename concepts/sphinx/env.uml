@startuml

class BuildEnvironment {
   + app: Sphinx = None
   + doctreedir: str = None
   + srcdir: str = None
   + config: Config = None
   + config_status: int = None
   + config_status_extra: str = None
   + events: EventManager = None
   + project: Project = None
   + version: Dict[str, str] = None
   + domains = {}
   + settings = default_settings.copy()
   + all_docs: Dict[str, float] = {}
   + dependencies: Dict[str, Set[str]] = defaultdict(set)
   + included: Dict[str, Set[str]] = defaultdict(set)
   + reread_always: Set[str] = set()
   + metadata: Dict[str, Dict[str, Any]] = defaultdict(dict)
   + titles: Dict[str, nodes.title] = {}
   + longtitles: Dict[str, nodes.title] = {}
   + tocs: Dict[str, nodes.bullet_list] = {}
   + toc_num_entries: Dict[str, int] = {}
   + toctree_includes: Dict[str, List[str]] = {}
   + files_to_rebuild: Dict[str, Set[str]] = {}
   + glob_toctrees: Set[str] = set()
   + numbered_toctrees: Set[str] = set()
   ==
   None __init__(app: "Sphinx" = None)
   None clear_doc(docname: str)
   Optional[str] path2doc(self, filename: str)
   str oc2path(docname: str, base: bool = True)
   Tuple[str, str] relfn2path(self, filename: str, docname: str = None)
   None find_files(self, config: Config, builder: "Builder")
   Tuple[Set[str], Set[str], Set[str]] get_outdated_files(self, config_changed: bool)
   nodes.document get_doctree(self, docname: str)
   nodes.document get_and_resolve_doctree(self, docname: str, builder: "Builder",
                                doctree: nodes.document = None, prune_toctrees: bool = True,
                                includehidden: bool = False)
   None resolve_references(self, doctree: nodes.document, fromdocname: str,
                           builder: "Builder")
   None apply_post_transforms(self, doctree: nodes.document, docname: str)
   Dict[str, List[Optional[str]]] collect_relations(self)
   None check_consistency()
}

note top of BuildEnvironment
   The environment in which the ReST files are translated.
    Stores an inventory of cross-file targets and provides doctree
    transformations to resolve links to them.
end note
note left of BuildEnvironment::all_docs
   All read docnames                                    
end note
note left of BuildEnvironment::titles
   TOC inventory
   docname -> title node                              
end note
note left of BuildEnvironment::longtitles
   If only different from title:                         
   docname -> title node
end note
note left of BuildEnvironment::tocs
   nodetree contents:                                    
   docname -> table                                
end note
note left of BuildEnvironment::toc_num_entries
   docname -> number of real entries           
end note
note left of BuildEnvironment::toctree_includes
   docname -> list of toctree includefiles
end note
note left of BuildEnvironment::files_to_rebuild
   Files (containing TOCs) to rebuild:
   docname -> set
end note

note left of BuildEnvironment::dependencies
   names, relative to documentation root:     
   docname -> set of dependent file
end note
note left of BuildEnvironment::included
   docnames included from other documents:
   docname -> set of included file
end note

note left of BuildEnvironment::reread_always
   docnames to re-read unconditionally           
   on next build
end note
note left of BuildEnvironment::metadata
   File metadata:
   docname -> dict of metadata items            
end note
note left of BuildEnvironment::glob_toctrees
   docnames that have :glob: toctrees
end note
note left of BuildEnvironment::numbered_toctrees
   docnames that have :numbered: toctrees
end note
note left of BuildEnvironment::get_doctree
   Read the doctree from the pickle, resolve
   cross-references and toctrees and return it.
end note
note left of BuildEnvironment::get_and_resolve_doctree
   Resolve a *toctree* node into individual
   bullet lists with titles as items
end note

BuildEnvironment::project -> sphinx.project.Project : app.project
BuildEnvironment::app -> sphinx.application.Sphinx : app

@enduml