.. _research_sphinx_write:

Resolve and Write
#################

.. graphviz:: phases_write.gv

Sphinx continues processing the parsed documents. It determines the final list of the documents to process and
then implements RESOLVING and WRITING phases for each document.


Process
=======

The main steps are presented on the following diagram:

.. uml:: write.uml
   :alt: The write method

#. Start the ``app.builder.write`` method defined in the ``sphinx.builders.Builder`` class.
   Its signature looks as follows::

       def write(self, build_docnames: Iterable[str], updated_docnames: Sequence[str], \
                  method: str = 'update') -> None:  # NOQA

   If you temporarily uncomment the print statement that follows the method definition, it will display the received
   arguments similar to the following::

      build_docnames: {'folder1/index', 'folder2/index', 'index'}
      updated_docnames: ['folder1/index', 'folder2/index', 'index']
      method: update

   In this list:

   *  ``build_docnames`` is a list of names passed to the parent ``build`` method.
   *  ``updated_docnames`` is a list of names generated by the ``read`` method and extended with the names
      of the outdated documents.
   *  ``method`` defines the operation for the ``app.builder.write`` method.
      If the method is ``update``, the ``app.builder.write`` method will unite ``build_docnames``
      and ``updated_docnames`` into the ``docnames`` set and process the united set.

   The method determines whether to process documents in parallel or sequentially.
   In this process the latter is used.

#. Call the ``app.builder.prepare_writing`` to prepare the documentation

#. Call the ``app.builder._write_serial`` method passing it the list of documents generated in the previous step.
   The method processes all documents one by one in a cycle.
   To make the method display all files that it processes, add the ``-v`` argument to the ``sphinx-build`` utility.
   Then you will see the messages similar to these::

      writing output... [ 33%] folder1/index
      writing output... [ 66%] folder2/index
      writing output... [100%] index

   For each document, the method turns on the RESOLVING phase, in which it runs the ``env.get_and_resolve_doctree``,
   and then the WRITING phase, in which it runs the ``app.builder.write_doc_serialized``
   and then the ``app.builder.write_doc`` methods.

#. Call the ``app.env.get_and_resolve_doctree`` method passing it the document name and the reference
   to the ``app.builder`` object.


#. Call the ``app.build.write_doc_serialized`` method passing it the document name and its ``doctree`` determined
   in the previous step.

#. Call the ``app.build.write_doc`` method passing it the document name and its ``doctree``.


Project state
=============
